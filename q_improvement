# LangChain 기반 통합 파이프라인: 정규식 태깅 + LLM 태깅 + 질문 재작성

import re
from typing import List, Dict
from langchain_core.runnables import RunnableMap, RunnableLambda, RunnableSequence
from langchain_core.prompts import PromptTemplate
from langchain_core.language_models import ChatOpenAI
import json

# Step 1: 정규식 기반 태깅 함수
def regex_tagging(text: str) -> (str, List[Dict]):
    patterns = {
        "PROPOSAL_ID": r'\b[a-z]{3}_\d{4}_\d{4}\b',
        "TOOL_ID": r'\bEQ\d{4}\b',
    }

    tags = []
    for tag_type, pattern in patterns.items():
        matches = re.findall(pattern, text)
        for match in matches:
            tags.append({"type": tag_type, "value": match})
            text = text.replace(match, f"@{tag_type}({match})")

    return text, tags

# Step 2: 프롬프트 템플릿 (LLM 태깅)
step2_prompt = PromptTemplate.from_template("""
다음 문장에서 LOT_ID, PROCESS_NAME, TEAM_NAME에 해당하는 고유명사만 태깅해줘.
- LOT_ID: 4 또는 6으로 시작하는 10자리 문자열
- PROCESS_NAME: 반도체 공정명
- TEAM_NAME: 부서/조직 이름

형식:
[{{"type": "...", "value": "..."}}]

문장:
"{text}"
""")

# Step 3: 태깅 정보 기반 재작성
ACTION_RULES = {
    "PROPOSAL_ID": {"action": "remove"},
    "TOOL_ID": {"action": "keep"},
    "LOT_ID": {"action": "generalize", "replacement": "특정 랏코드"},
    "PROCESS_NAME": {"action": "keep"},
    "TEAM_NAME": {"action": "remove"},
}

def rewrite_question(original_text: str, entity_tags: List[Dict]) -> str:
    rewritten = original_text
    for tag in entity_tags:
        value = tag["value"]
        tag_type = tag["type"]
        action = ACTION_RULES.get(tag_type, {}).get("action", "keep")

        if action == "remove":
            rewritten = rewritten.replace(value, "")
        elif action == "generalize":
            replacement = ACTION_RULES[tag_type]["replacement"]
            rewritten = rewritten.replace(value, replacement)

    rewritten = re.sub(r'\s+', ' ', rewritten)
    rewritten = re.sub(r'\(\s*\)', '', rewritten)
    rewritten = re.sub(r'\s+([?.!,])', r'\1', rewritten)
    return rewritten.strip()

# Step 2-1: JSON 파싱 함수
def parse_llm_json(output: str) -> List[Dict]:
    try:
        return json.loads(output)
    except:
        return []

# Step 2-2: Step1 + Step2 병합 함수
def merge_tags(step1_tags: List[Dict], step2_tags: List[Dict]) -> List[Dict]:
    step1_values = {tag["value"] for tag in step1_tags}
    return step1_tags + [tag for tag in step2_tags if tag["value"] not in step1_values]

# LangChain Runnable 정의
llm = ChatOpenAI(model="gpt-4", temperature=0)

pipeline = RunnableSequence(
    steps=[
        RunnableMap({
            "original": lambda x: x,
            "regex_result": lambda x: regex_tagging(x)
        }),
        RunnableMap({
            "original": lambda d: d["original"],
            "regex_tags": lambda d: d["regex_result"][1],
            "regex_text": lambda d: d["regex_result"][0],
        }),
        RunnableMap({
            "original": lambda d: d["original"],
            "regex_tags": lambda d: d["regex_tags"],
            "step2_tags": step2_prompt | llm | RunnableLambda(parse_llm_json),
        }),
        RunnableLambda(lambda d: rewrite_question(d["original"], merge_tags(d["regex_tags"], d["step2_tags"]))),
    ]
)

# 테스트 실행 예시
question = "기안 번호 aaa_1234_5678 에서 4ABCD12345(랏코드)에 대해 grade 변경이 필요한데 어떻게 하나요?"
result = pipeline.invoke(question)
print("최종 질문:", result)



# 1. 원본 질문
original_question = "기안 번호 aaa_1234_5678 에서 4ABCD12345(랏코드)에 대해 grade 변경이 필요한데 어떻게 하나요?"

# 2. Step 1: 정규식 태깅
step1_text, step1_tags = regex_tagging(original_question)

# 3. Step 2: LLM에 넣을 프롬프트 생성
step2_prompt = f"""
다음 문장에서 LOT_ID, PROCESS_NAME, TEAM_NAME에 해당하는 고유명사만 태깅해줘.
- LOT_ID: 4 또는 6으로 시작하는 10자리 문자열
- PROCESS_NAME: 반도체 공정명
- TEAM_NAME: 부서/조직 이름

형식:
[{{"type": "...", "value": "..."}}]

문장:
\"{step1_text}\"
"""

# (실제 LLM 호출 대신 예시 결과로 대체)
step2_tags = [
    {"type": "LOT_ID", "value": "4ABCD12345"},
]

# 4. Step 1과 Step 2 태깅 결과 결합
all_tags = merge_tag_lists(step1_tags, step2_tags)

# 5. Step 3: 재작성
final_question = rewrite_question(original_question, all_tags)

print("최종 질문:", final_question)



#### 수정
step3_template = """
You are given a user question and a list of named entity tags with predefined actions for words in a question.  
Based on these actions, rewrite the question in a clear and grammatically natural way while preserving its meaning.
And also remove unnecessary words or expressions such as greetings.

### Original Question:
{original_question}

### Entity Tagging Info:
{tag_info}

### Action Rules:
- If action is "remove", delete the entity from the question.
- If action is "generalize", replace it with the "general_form".
- If action is "keep", leave it as is.

### Output Example:
How do I change the grade for a specific lot ID?
"""

step3_prompt = PromptTemplate(
    template=step3_template,
    template_format="jinja2",
    input_variables=["original_question","tag_info"],
)
